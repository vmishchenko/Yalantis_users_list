{"version":3,"sources":["api/getData.js","components/UsersList.js","components/MonthsList.js","App.js","serviceWorker.js","index.js"],"names":["getData","URL","fetch","then","response","json","UsersList","users","className","map","user","key","id","firstName","lastName","MonthsList","months","setColor","count","useState","usersToShow","setUsersToShow","mouseMoved","setMouseMoved","mouseEntered","event","m","find","item","target","monthItem","onMouseEnter","name","role","aria-label","App","templateMonths","setMonths","isLoading","setLoading","isLoaded","setLoaded","type","disabled","onClick","a","async","Promise","all","finally","loadedUsers","i","tempUsersArr","push","filter","Date","dob","getMonth","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5261ddf3.chunk.js","sourcesContent":["const getData = URL => fetch(URL)\n  .then(response => response.json());\n\nexport default getData;\n","import React from 'react';\n\nconst UsersList = ({ users }) => (\n  <div className=\"col\">\n    <ul>\n      {users.map(user =>\n        <li key={user.id}>\n          {`${user.firstName} ${user.lastName}`}\n        </li>\n      )}\n    </ul>\n  </div>\n);\n\nexport default UsersList;\n","import React, {useState} from 'react';\nimport UsersList from './UsersList';\n\nconst MonthsList = ({ months }) => {\n\n  const setColor = (count) => {\n    switch (true) {\n      case (count <= 2): {\n        return 'bg-secondary text-white';\n      }\n      case (count <= 6): {\n        return 'bg-primary text-white';\n      }\n      case (count <= 10): {\n        return 'bg-success text-white';\n      }\n      default: {\n        return 'bg-danger text-white';\n      }\n    }\n  };\n  const [usersToShow, setUsersToShow] = useState([]);\n  const [mouseMoved, setMouseMoved] = useState(false);\n\n  const mouseEntered = (event) => {\n    const m = months.find(item => item.id === +event.target.id);\n    setUsersToShow(m.users[0]);\n    setMouseMoved(true);\n  };\n\n\n  return (\n    <div className=\"row content\">\n      <div className=\"col month\">\n        <ul>\n          {months.map(monthItem => (\n            <li\n              key={monthItem.id}\n              id={monthItem.id}\n              className={setColor(monthItem.count)}\n              onMouseEnter={mouseEntered}\n            >\n              {monthItem.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {mouseMoved\n      ? <UsersList users={usersToShow} />\n      : <p className=\"col\">\n          <span role=\"img\" aria-label=\"finger\">ðŸ‘ˆ</span> Move mouse on month <br /> to see users\n      </p>\n      }\n    </div>\n  )\n};\n\nexport default MonthsList;\n","import React, {useState} from 'react';\nimport getData from './api/getData';\nimport MonthsList from './components/MonthsList';\n\n\nimport './App.css';\n\nfunction App() {\n  const usersList = 'https://yalantis-react-school.herokuapp.com/api/task0/users';\n\n  const templateMonths = [\n    {\n      name: 'Jan',\n    },\n    {\n      name: 'Feb',\n    },\n    {\n      name: 'Mar',\n    },\n    {\n      name: 'Apr',\n    },\n    {\n      name: 'May',\n    },\n    {\n      name: 'Jun',\n    },\n    {\n      name: 'Jul',\n    },\n    {\n      name: 'Aug',\n    },\n    {\n      name: 'Sep',\n    },\n    {\n      name: 'Oct',\n    },\n    {\n      name: 'Nov',\n    },\n    {\n      name: 'Dec',\n    },\n  ];\n\n  const [months, setMonths] = useState([]);\n  const [isLoading, setLoading] = useState(false);\n  const [isLoaded, setLoaded] = useState(false);\n\n\n\n  const loadUsers = async() => {\n    setLoading(true);\n\n    const loadedUsers = await Promise.all(await getData(usersList))\n      .finally(() => setLoaded(true));\n\n    setLoading(false);\n    for (let i = 0; i < 12; i++) {\n      let tempUsersArr = [];\n      tempUsersArr\n        .push([...loadedUsers]\n          .filter(user => new Date(user.dob).getMonth() === i)\n        );\n\n      templateMonths[i] = {\n        ...templateMonths[i],\n        id: i,\n        users: tempUsersArr,\n        count: tempUsersArr[0].length,\n      }\n    }\n    setMonths(templateMonths);\n  };\n\n\n  return (\n    <div className=\"App\">\n      {!isLoaded\n        ? (\n          <button\n            type=\"button\"\n            disabled={isLoading}\n            onClick={loadUsers}\n            className=\"btn btn-dark\"\n          >\n            {isLoading ? (<>Loading...</>) : (<>Load Users</>)}\n          </button>\n        )\n        : (\n          <>\n            <MonthsList months={months} />\n          </>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}